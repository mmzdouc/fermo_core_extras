"""Manages methods related to argparse-based command line argument parsing.

Copyright (c) 2022 to present Koen van Ingen, Mitja M. Zdouc, PhD and individual contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from argparse import ArgumentParser


class ParsingManager:
    """Manages methods related to argparse-based command line argument parsing."""

    @staticmethod
    def run_parser(commandline_args):
        """Parses user input and returns a formatted dictionary

        Attributes:
            commandline_args: Raw command line input from argv[1:].

        Returns:
            args_dict: Formatted dictionary regarding in and outputs of main.py.
            args.mode: Mode that the program will be run in.
        """
        parser = ArgumentParser(
            description="Generates a spectral library from a folder of MIBiG entries using CFM-ID"
        )
        subparsers = parser.add_subparsers(
            help="See mode -h for required arguments per mode.",
            required=True,
            dest="mode",
        )
        pre_parser = subparsers.add_parser(
            "preprocessing",
            help="Processes the .json files from MIBiG into input"
            " for CFM-ID and metadata file.",
        )
        pre_parser.add_argument(
            "mibig", help="Path of the mibig.json folder containing .json files."
        )
        pre_parser.add_argument(
            "c_file",
            help="Path of CFM-ID input file containing metabolite name, SMILES. NEEDS .txt EXTENSION!",
        )
        pre_parser.add_argument(
            "m_file",
            help="Path of output file containing metabolite name, SMILES, "
            "chemical formula,molecular mass, database IDs, MIBiG entry ID.",
        )
        cfm_parser = subparsers.add_parser(
            "cfm_id",
            help="Builds and executes the command to run CFM-ID "
            "in dockerized environment using nice -16",
        )
        cfm_parser.add_argument(
            "c_file", help="Path of input file containing metabolite name, SMILES."
        )
        cfm_parser.add_argument(
            "o_folder",
            help="Path of cfm-id output folder where it will create 1"
            " fragmentation spectrum file per metabolite.",
        )
        cfm_parser.add_argument(
            "prune",
            help="Probability below which metabolite fragments will be excluded"
            " from predictions.",
        )
        metadata_parser = subparsers.add_parser(
            "metadata",
            help="Creates a spectral library .mgf file from CFM-ID input combined"
            " with metadata from preprocessing_manager.py",
        )
        metadata_parser.add_argument(
            "o_folder",
            help="Path of cfm-id output folder where it will create 1"
            " fragmentation spectrum file per metabolite.",
        )
        metadata_parser.add_argument(
            "m_file",
            help="Path of output file containing metabolite name, SMILES, "
            "chemical formula,molecular mass, database IDs, MIBiG entry ID.",
        )
        metadata_parser.add_argument(
            "mgf_file",
            help="Path of the singular .mgf file spectral library generated by this pipeline",
        )
        all_cfm_parser = subparsers.add_parser(
            "all_cfm_id",
            help="Performs all above actions using CFM-ID as a predictor"
            " of fragmentation",
        )
        all_cfm_parser.add_argument(
            "mibig", help="Path of the mibig.json folder containing .json files."
        )
        all_cfm_parser.add_argument(
            "c_file", help="Path of input file containing metabolite name, SMILES."
        )
        all_cfm_parser.add_argument(
            "m_file",
            help="Path of output file containing metabolite name, SMILES, "
            "chemical formula,molecular mass, database IDs, MIBiG entry ID.",
        )
        all_cfm_parser.add_argument(
            "o_folder",
            help="Path of cfm-id output folder where it will create 1"
            " fragmentation spectrum file per metabolite.",
        )
        all_cfm_parser.add_argument(
            "prune",
            help="Probability below which metabolite fragments will be excluded"
            " from predictions.",
        )
        all_cfm_parser.add_argument(
            "mgf_file",
            help="Path of the singular .mgf file spectral library generated by this pipeline",
        )
        args = parser.parse_args(commandline_args)
        args_dict = {}
        for arg_name, arg_value in vars(args).items():
            if arg_name != "mode":
                args_dict[arg_name] = arg_value
        return args_dict, args.mode
